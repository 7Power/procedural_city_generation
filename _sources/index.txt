.. procedural_city_generation documentation master file, created by
   sphinx-quickstart on Fri Aug 21 11:27:23 2015.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

**Procedural City Generation in Python - Documentation**
========================================================

.. image:: images/currentstate.png
   :align:   center
   :height: 600px
   :width: 1062 px

Welcome to procedural_city_generation's documentation! In this page we will give an overview of all the things you need to know to get started  with this project. 
 
* `Getting it to work`_
* `Indices and tables`_




**Getting it to work**
--------------------

You can get the source code at our `Github Page <https://github.com/josauder/procedural_city_generation>`_

If you have git installed, you can clone the repository
with::
	git clone https://github.com/josauder/procedural_city_generation.git

**Dependencies:**

* numpy
* scipy
* matplotlib
* Blender 2.69

To start the program with the GUI::

	cd procedural_city_generation
	python GUI

If everything worked so far, the GUI should open up and look like this:

.. image::  images/GUI.png
   :align:   center


**Roadmap Creation**
--------------------
We refer to "road segments" as edges and the two ends of an edge as a vertex.
We create roadmaps by starting with an axiom (a list of Vertices) and defining a set of rules by which new Vertices are added and connected to existing one to form Edges. 
Many of the terms used here become obvious when you see them in action. Let's start by showing the most important inputs:


The Growth-Rule Image:
++++++++++++++++++++++
.. image:: images/growthrule.png
   :align: center
   :height: 400px
   :width: 400 px

This image describes which growth rule will be used in which area. Blue means that the radial rule will be used, Red means that the grid rule will be used, and Green means that the natural rule will be used. We will discuss the rules in detail later.


The Population-Density Image:
+++++++++++++++++++++++++++++

.. image:: images/populationdensity.png
   :align:   center
   :height: 400px
   :width: 400 px
   
This image describes the probabilities that vertices will be connected at all.
The lighter, the more probable it is, that an edge will be built. 


The output
++++++++++++++++++++++

.. image:: images/roadmap.png
   :align:   center
   :height: 400px
   :width: 400 px
   
This is what the finished roadmap for a relatively small city looks like. 
As you see there are main roads and minor roads. 
The correlation between the input and the output is also very clear in this example.


Correlation between input and output
++++++++++++++++++++++++++++++++++++++

.. image:: images/result.png
   :align:   center
   :height: 400px
   :width: 400 px

.. image:: images/result2.png
   :align:   center 
   :height: 400px
   :width: 400 px
   
It should now have become clearer as to what the growth rules and the population density actually describe. 





**Polygon extraction and subdivision**
-------------------------------------

We split up each of the 'blocks' additionally into 'lots'. On every lot, one building can be placed. Lots that are too large will be omitted from building.

.. image:: images/splitup.png
   :align:   center 
   :height: 400px
   :width: 400 px


**Creation of 3D Data**
------------------------

We create buildings by choosing various parameters according to the population density, such as the building height and Textures.

We then start by scaling and or transforming the lot down, and possibly applying a series of operations on each of the walls.

**Visualization in Blender**
---------------------------

.. image:: images/visualized.png
   :align:   center 
   :height: 400px
   :width: 400 px





.. toctree::
   :maxdepth: 2

.. procedural_city_generation


**Indices and tables**
==================

* :ref:`modindex`
* :ref:`search`
* :ref:`genindex`
